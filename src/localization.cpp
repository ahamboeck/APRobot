#include <localization.h>
#include "matplotlibcpp.h"
namespace plt = matplotlibcpp;

std::vector<float> laserScanVec = {
    1.0429999828338623,
    1.0720000267028809,
    1.0520000457763672,
    1.0700000524520874,
    1.0369999408721924,
    1.0640000104904175,
    1.0670000314712524,
    1.0679999589920044,
    1.0579999685287476,
    1.0679999589920044,
    1.0740000009536743,
    1.0850000381469727,
    1.0579999685287476,
    1.090000033378601,
    1.0920000076293945,
    1.1089999675750732,
    1.1039999723434448,
    1.1080000400543213,
    1.125,
    1.13100004196167,
    1.1339999437332153,
    1.1549999713897705,
    1.1410000324249268,
    1.1660000085830688,
    1.1790000200271606,
    1.1950000524520874,
    1.2020000219345093,
    1.2079999446868896,
    1.2380000352859497,
    1.253999948501587,
    1.2599999904632568,
    1.2690000534057617,
    1.2899999618530273,
    1.3250000476837158,
    1.3289999961853027,
    1.340000033378601,
    1.3769999742507935,
    1.3849999904632568,
    1.4170000553131104,
    1.4320000410079956,
    1.4630000591278076,
    1.4889999628067017,
    1.4700000286102295,
    1.4359999895095825,
    1.4010000228881836,
    1.402999997138977,
    1.371000051498413,
    1.3569999933242798,
    1.3509999513626099,
    1.3329999446868896,
    1.284000039100647,
    1.277999997138977,
    1.2519999742507935,
    1.24399995803833,
    1.2430000305175781,
    1.215999960899353,
    1.2070000171661377,
    1.1859999895095825,
    1.1699999570846558,
    1.1610000133514404,
    1.1690000295639038,
    1.1299999952316284,
    1.1330000162124634,
    1.1339999437332153,
    1.1119999885559082,
    1.1130000352859497,
    1.0959999561309814,
    1.0740000009536743,
    1.0839999914169312,
    1.0770000219345093,
    1.0720000267028809,
    1.069000005722046,
    1.0440000295639038,
    1.0700000524520874,
    1.0700000524520874,
    1.0609999895095825,
    1.0509999990463257,
    1.0609999895095825,
    1.0429999828338623,
    1.0410000085830688,
    1.0199999809265137,
    1.0440000295639038,
    1.0509999990463257,
    1.0820000171661377,
    1.1679999828338623,
    1.156000018119812,
    1.1460000276565552,
    1.152999997138977,
    1.1510000228881836,
    1.156000018119812,
    1.1540000438690186,
    1.1670000553131104,
    1.1690000295639038,
    1.1679999828338623,
    1.1660000085830688,
    1.1749999523162842,
    1.1759999990463257,
    1.1759999990463257,
    1.187000036239624,
    1.187999963760376,
    1.194000005722046,
    1.190000057220459,
    1.2000000476837158,
    1.2020000219345093,
    1.2289999723434448,
    1.2350000143051147,
    1.2319999933242798,
    1.2319999933242798,
    1.2480000257492065,
    1.2710000276565552,
    1.2669999599456787,
    1.2910000085830688,
    1.2990000247955322,
    1.2990000247955322,
    1.3220000267028809,
    1.3229999542236328,
    1.3329999446868896,
    1.347000002861023,
    1.3630000352859497,
    1.3830000162124634,
    1.406000018119812,
    1.4199999570846558,
    1.4329999685287476,
    1.4479999542236328,
    1.465999960899353,
    1.4759999513626099,
    1.5260000228881836,
    1.5440000295639038,
    1.562999963760376,
    1.5959999561309814,
    1.6119999885559082,
    1.6330000162124634,
    1.6749999523162842,
    1.690000057220459,
    1.715999960899353,
    1.7690000534057617,
    1.7799999713897705,
    1.8259999752044678,
    1.8760000467300415,
    1.9199999570846558,
    1.9850000143051147,
    2.0299999713897705,
    2.066999912261963,
    2.134000062942505,
    2.1640000343322754,
    2.25,
    2.2720000743865967,
    2.371999979019165,
    2.428999900817871,
    2.5199999809265137,
    2.61899995803833,
    2.7160000801086426,
    2.890000104904175,
    2.9619998931884766,
    3.0980000495910645,
    3.2079999446868896,
    3.3269999027252197,
    3.437999963760376,
    3.671999931335449,
    3.9189999103546143,
    3.7690000534057617,
    0.20100000500679016,
    0.21400000154972076,
    0.21299999952316284,
    0.21299999952316284,
    0.21199999749660492,
    0.210999995470047,
    0.20999999344348907,
    0.20999999344348907,
    0.20999999344348907,
    0.20999999344348907,
    0.210999995470047,
    0.21199999749660492,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.8489999771118164,
    0.6959999799728394,
    0.6959999799728394,
    0.8029999732971191,
    0.753000020980835,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    1.4850000143051147,
    0.0,
    0.0,
    1.7269999980926514,
    0.0,
    2.566999912261963,
    2.194999933242798,
    2.1540000438690186,
    2.8959999084472656,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.947000026702881,
    3.937000036239624,
    3.8489999771118164,
    3.9760000705718994,
    3.928999900817871,
    3.992000102996826,
    3.9809999465942383,
    3.8570001125335693,
    0.0,
    3.9619998931884766,
    4.045000076293945,
    4.046999931335449,
    4.120999813079834,
    4.080999851226807,
    3.1710000038146973,
    3.578000068664551,
    3.4159998893737793,
    3.325000047683716,
    3.2119998931884766,
    3.0840001106262207,
    2.619999885559082,
    2.2190001010894775,
    2.1610000133514404,
    2.1029999256134033,
    2.0339999198913574,
    2.000999927520752,
    1.9529999494552612,
    0.0,
    1.8259999752044678,
    1.7630000114440918,
    1.7269999980926514,
    1.7120000123977661,
    1.6449999809265137,
    1.6139999628067017,
    1.6019999980926514,
    1.5670000314712524,
    1.534000039100647,
    1.5119999647140503,
    1.4700000286102295,
    1.437000036239624,
    1.4290000200271606,
    1.3980000019073486,
    1.3860000371932983,
    1.3530000448226929,
    1.3370000123977661,
    1.2339999675750732,
    0.0,
    1.2910000085830688,
    1.2690000534057617,
    1.2669999599456787,
    1.2519999742507935,
    1.225000023841858,
    1.2059999704360962,
    1.1950000524520874,
    1.194000005722046,
    1.1890000104904175,
    1.1699999570846558,
    1.1380000114440918,
    1.1390000581741333,
    1.1260000467300415,
    1.128999948501587,
    1.1160000562667847,
    1.1059999465942383,
    1.1100000143051147,
    1.1069999933242798,
    1.1089999675750732,
    1.0670000314712524,
    1.0800000429153442,
    1.1019999980926514,
    1.0829999446868896,
    1.065999984741211,
    1.0700000524520874,
    1.059999942779541,
    1.0839999914169312,
    1.0820000171661377,
    1.0360000133514404,
    1.0369999408721924,
    1.034999966621399,
    1.0460000038146973,
    1.0399999618530273,
    1.0230000019073486,
    1.0579999685287476,
    1.0570000410079956,
    1.0529999732971191,
    1.0260000228881836};
double dist_a = 0.7;
double tol_a = 0.1;


localization::localization(const std::vector<float> &polarCoordinates) : laserScanVec(polarCoordinates) {}

localization localizer(laserScanVec);



auto cartesianCoordinates = localizer.convertToCartesian();
// auto coordAt20Degrees = converter.findCoordinatesByAngle(20);
auto upperWall = localizer.filterWall(cartesianCoordinates, dist_a, -tol_a);
auto lowerWall = localizer.filterWall(cartesianCoordinates, -dist_a, tol_a);

std::vector<std::tuple<float, float, int>> localization::convertToCartesian()
{
    cartesianCoordinates.clear();
    for (int i = 0; i < laserScanVec.size(); ++i)
    {
        float angleInRadians = i * M_PI / 180.0;
        float x = laserScanVec[i] * cos(angleInRadians);
        float y = laserScanVec[i] * sin(angleInRadians);
        cartesianCoordinates.push_back(std::make_tuple(x, y, i));
    }
    return cartesianCoordinates;
}

std::vector<std::tuple<float, float, int>> localization::filterWall(std::vector<std::tuple<float, float, int>> scanData, double boundary, double tolerance)
{
    // this function filters the upper or lower walls
    std::vector<std::tuple<float, float, int>> Wall;

    for (const auto &point : scanData)
    {
        float x, y;
        int angle;
        std::tie(x, y, angle) = point;

        if (y > (boundary - tolerance))
        {
            Wall.push_back(point);
            // Points where y is exactly boundary - tolerance are not included in either vector.
            // You can decide where to put such points based on your requirements.
        }
    }
    return Wall;
}

void localization::center()
{
    for (const auto &coord : cartesianCoordinates)
    {
        float x, y;
        int angle;
        std::tie(x, y, angle) = coord;
        std::cout << "(" << x << ", " << y << ", " << angle << ")" << std::endl;
    };
} 

void localization::pyPlot()
{
    std::vector<float> xValues;
    std::vector<float> yValues;

    for (const auto &coord : upperWall)
    {
        float x, y;
        int angle;
        std::tie(x, y, angle) = coord;
        xValues.push_back(x);
        yValues.push_back(y);
    }

    // Plotting
    plt::plot(xValues, yValues, "bo"); // "bo" for blue dots
    plt::title("XY Coordinates");
    plt::xlabel("X-axis");
    plt::ylabel("Y-axis");
    plt::show();
}

// void angle_search()
// {
//     try
//     {

//         float x, y;
//         int angle;
//         std::tie(x, y, angle) = coordAt20Degrees;
//         std::cout << "Coordinates at 20 degrees: X=" << x << ", Y=" << y << std::endl;
//     }
//     catch (const std::runtime_error &e)
//     {
//         std::cerr << e.what() << std::endl;
//     }
// }
// std::tuple<float, float, int> pol2Car::findCoordinatesByAngle(int angle) {
//     for (const auto& coord : cartesianCoordinates) {
//         if (std::get<2>(coord) == angle) {
//             return coord;
//         }
//     }
//     throw std::runtime_error("Angle not found in the vector.");
// }